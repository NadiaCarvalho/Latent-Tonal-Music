/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "(__entryId=1)/./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("let tk;\nlet meiXML = '';\nlet encoding = 'pianoroll';\n\ndocument.addEventListener(\"DOMContentLoaded\", (event) => {\n    verovio.module.onRuntimeInitialized = async _ => {\n        tk = new verovio.toolkit();\n        console.log(\"Verovio has loaded!\");\n    };\n});\n\n// The current page, which will change when playing through the piece\nlet currentPage = 1;\n\n/**\n The handler to start/stop playing the file\n**/\nconst playMIDIHandler = function () {\n    // Get the MIDI file from the Verovio toolkit\n    let base64midi = tk.renderToMIDI();\n    // Add the data URL prefixes describing the content\n    let midiString = 'data:audio/midi;base64,' + base64midi;\n    // Pass it to play to MIDIjs\n    MIDIjs.play(midiString);\n\n    document.getElementById(\"pauseMIDI\").removeAttribute(\"disabled\");\n\n    document.getElementById(\"playMIDI\").innerText = \"Stop\";\n    document.getElementById(\"playMIDI\").addEventListener(\"click\", stopMIDIHandler);\n    document.getElementById(\"playMIDI\").removeEventListener(\"click\", playMIDIHandler);\n}\nconst stopMIDIHandler = function () {\n    MIDIjs.stop();\n\n    let playingNotes = document.querySelectorAll('g.note.playing');\n    for (let playingNote of playingNotes) playingNote.classList.remove(\"playing\");\n\n    currentPage = 1;\n    document.getElementById(\"notation\").innerHTML = tk.renderToSVG(currentPage);\n\n    document.getElementById(\"playMIDI\").innerText = \"Play\";\n    document.getElementById(\"playMIDI\").addEventListener(\"click\", playMIDIHandler);\n    document.getElementById(\"playMIDI\").removeEventListener(\"click\", stopMIDIHandler);\n\n    document.getElementById(\"pauseMIDI\").setAttribute(\"disabled\", true);\n}\n\n/**\n The handlers to pause/continue playing the file\n**/\nconst pauseMIDIHandler = function () {\n    MIDIjs.pause();\n\n    document.getElementById(\"pauseMIDI\").innerText = \"Continue\";\n    document.getElementById(\"pauseMIDI\").addEventListener(\"click\", continueMIDIHandler);\n    document.getElementById(\"pauseMIDI\").removeEventListener(\"click\", pauseMIDIHandler);\n}\nconst continueMIDIHandler = function () {\n    MIDIjs.resume();\n\n    document.getElementById(\"pauseMIDI\").innerText = \"Pause\";\n    document.getElementById(\"pauseMIDI\").addEventListener(\"click\", pauseMIDIHandler);\n    document.getElementById(\"pauseMIDI\").removeEventListener(\"click\", continueMIDIHandler);\n}\n\n/**\n * The handler to highlight the notes while playing the file\n **/\nconst midiHightlightingHandler = function (event) {\n    // Remove the attribute 'playing' of all notes previously playing\n    let playingNotes = document.querySelectorAll('g.note.playing');\n    for (let playingNote of playingNotes) playingNote.classList.remove(\"playing\");\n\n    // Get elements at a time in milliseconds (time from the player is in seconds)\n    let currentElements = tk.getElementsAtTime(event.time * 1000);\n\n    if (currentElements.page == 0) return;\n\n    if (currentElements.page != currentPage) {\n        currentPage = currentElements.page;\n        document.getElementById(\"notation\").innerHTML = tk.renderToSVG(currentPage);\n    }\n\n    // Get all notes playing and set the class\n    for (note of currentElements.notes) {\n        let noteElement = document.getElementById(note);\n        if (noteElement) noteElement.classList.add(\"playing\");\n    }\n}\n\n/**\n    Wire up the buttons to actually work.\n*/\ndocument.getElementById(\"playMIDI\").addEventListener(\"click\", playMIDIHandler);\ndocument.getElementById(\"pauseMIDI\").addEventListener(\"click\", pauseMIDIHandler);\n/**\n Set the function as message callback\n*/\nMIDIjs.player_callback = midiHightlightingHandler;\n\nfunction showFile(input) {\n\n    let file = input.files[0];\n    let reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = function () {\n\n        meiXML = reader.result;\n        let svg = tk.renderData(meiXML, {\n            pageHeight: 500,\n            pageWidth: 2000,\n            scale: 25,\n            adjustPageHeight: 1,\n            border: 0,\n            font: \"Leipzig\",\n        });\n        document.getElementById(\"notation\").innerHTML = svg;\n        document.getElementById(\"playMIDI\").removeAttribute(\"disabled\");\n\n        showEncoding(meiXML, encoding);\n    };\n\n    reader.onerror = function () {\n        console.log(reader.error);\n    };\n};\n\nfunction showEncoding(input, encoding) {\n\n    switch (encoding) {\n        case 'pianoroll':\n            showPianoroll(input);\n            break;\n        default:\n            break;\n    }\n}\n\nfunction showPianoroll(input, continuations = false, resolution = 4) {\n    stream = music21.converter.parse(input);\n    notes = stream.flat.notes.srcStreamElements.filter(function(item) {\n        return item.isClassOrSubclass('Note');\n    });\n\n    let totalDuration = Math.round(notes.at(notes.length-1).offset + notes[notes.length-1].duration.quarterLength)*resolution;\n\n    let rows = continuations ? 256 : 128;\n    let matrix = Array.from(Array(totalDuration), _ => Array(rows).fill(0));\n\n    for (let note of notes) {\n        let offset = Math.round(note.offset*resolution);\n        let duration = Math.round(note.duration.quarterLength*resolution);\n        let pitch = note.pitch.ps;\n        for (let i = offset; i < offset + duration; i++) {\n            matrix[i][pitch] = 1;\n        }\n    }\n\n    let matrixDiv = document.createElement(\"div\");\n    for (let i = 0; i < totalDuration; i++) {\n        let rowDiv = document.createElement(\"div\");\n        rowDiv.classList.add(\"row\");\n        for (let j = 0; j < rows; j++) {\n            let cellDiv = document.createElement(\"div\");\n            cellDiv.classList.add(\"cell\");\n            //cellDiv.innerText = matrix[i][j];\n            if (matrix[i][j] == 1) cellDiv.classList.add(\"active\");\n            rowDiv.appendChild(cellDiv);\n        }\n        matrixDiv.appendChild(rowDiv);\n    }\n\n    document.getElementById(\"encoding\").appendChild(matrixDiv);\n}\n\nfunction changeEncoding(encoding) {\n    showEncoding(meiXML, encoding);\n}\n\n\n\n//# sourceURL=webpack://latent-tonal-music/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["(__entryId=1)/./src/index.js"]();
/******/ 	
/******/ })()
;